---
import Button from "../components/Button.astro";
const { data, num, all, dataSuffix } = Astro.props;
const boxes = [...Array(data.boxes)]
const { customClass, help } = data
---

<section data-extra={data.isExtra && "true"} data-exercise-key={`${dataSuffix}-${num}`} class={customClass ?? null}>
        <h2 class="small-label">Øvelse {num} af {all}</h2>

        {data.isExtra && (
            <div class="banner" data-banner-title="Ekstra"></div>
        )}

        <article class="exercise-details">
          {data.targetSrc.type==="video" ? (
                <video muted loop autoplay playsinline preload="metadata">
                    <source src={data.targetSrc.path} type="video/mp4" />
                </video>
            ) : (
                <img loading="lazy" src={data.targetSrc.path} alt={data.title} width="{data.targetSrc.width}" height="{data.targetSrc.height}">
            )
          }
          <div class="exercise-content">
            <h3>{data.title}</h3>

            {data.astro.html}

            {data.hints ? (
                <details>
                    <summary>Hints</summary>
                    <ul class="hints">
                        {data.hints.map(hint=>{
                            return <li data-type={hint?.type}><code>{hint?.name}</code> ({hint?.type})</li>      
                        })}
                    </ul>
                </details>
            ) : (
                <div data-no-hints>Ingen hints</div>
            )}
          </div>
        </article>

        
        {data.canAddBoxes && (
            <div class="controls">
                <div>
                    <Button icon="plus">Tilføj boks</Button>
                    <Button icon="minus">Fjern boks</Button>
                </div>
            </div>
        )}

        <article class="output">
          <div class="container">
              {boxes.map((_,index)=><div class={`box box-${index+1}`}></div>)}
          </div>
        </article>

        <div class="editor">
          <div class="reset-buttons">
            <button class="reset">
              <span class="visually-hidden">Nulstil</span>
              <svg aria-hidden="true" width="15" height="15">
                <use href="#reset-icon">
              </svg>
            </button>
            <div class="button-group-confirm">
              <button data-accept="true" data-message="Accepter">
              <span class="visually-hidden">Accepter nulstilling</span>
                <svg aria-hidden="true" width="18" height="18">
                  <use href="#accept">
                </svg>
              </button>
              <button data-accept="false" data-message="Afvis">
              <span class="visually-hidden">Afvis nulstilling</span>
                <svg aria-hidden="true" width="18" height="18">
                  <use href="#reject">
                </svg>
              </button>
            </div>
          </div>
          <textarea aria-label="Write here" autocorrect="off" autocomplete="off" spellcheck="false" autocapitalize="off" class="prism-live language-css">{data.startingCSS.trim()}</textarea>
          <style class="style"></style>
        </div>
        {data.help?.link ? (<small>Har du brug for hjælp? <a href={data.help.link} target="_blank" rel="noopener">Lær mere om {data?.help?.topic || "grid"}</a></small>) : null}
      </section>


      <style lang="scss">
        small {
          font-size: 80%;
          grid-column: 2 / -2;
          background: var(--purple-50);
          padding: 0 var(--space-2);
          inline-size: max-content;
          border-radius: var(--bdrs-sm);
        
          a:any-link {
            text-decoration: underline;
            color: var(--purple-600);
            padding-block: var(--space-1);
            display: inline-block;
            border-radius: var(--bdrs-sm);

            &:hover,
            &:focus {
              color: var(--purple-400);
              text-decoration: none;
            }
          }
        }
        .reset-buttons {
          position: absolute;
          inset-inline-end: 0;
          inset-block-start: var(--space-1);
          z-index: 1;
          display: grid;
          gap: 0 .4ch;
          place-items: end;
          margin-inline-end: var(--space-1);
        }

        .reset-buttons > * {
          grid-area: 1 / 1;
        }

        .button-group-confirm {
          display: flex;
          gap: .5ch;
          pointer-events: none;
          opacity: 0;
          transition: .3s opacity;
        }

        .reset-buttons.active .button-group-confirm {
          opacity: 1;
          pointer-events: auto;
        }

        .reset-buttons.active > button {
          opacity: 0;
          pointer-events: none;
        }

        button[data-accept] {
          --btn-stroke: 0;
          --btn-theme: #fb28a8;
          position: relative;
          color: #fff;
          padding: 0;
          inline-size: 28px;
          block-size: 28px;
          background: transparent;
          display: grid;
          place-content: center;
        }

        @media (hover: hover) {
          button:hover {
            --btn-stroke: 2px;
          }
        }
      </style>